name: HardenEKS + Kubent Scan

on:
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  REPORT_DIR: reports/${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ secrets.AWS_HARDENEKS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region "${{ secrets.AWS_REGION }}" \
            --name   "${{ secrets.EKS_CLUSTER_NAME }}"

      - name: Allow this runner IP to EKS API
        id: allowapi
        shell: bash
        run: |
          set -euo pipefail
          REGION='${{ secrets.AWS_REGION }}'
          CLUSTER='${{ secrets.EKS_CLUSTER_NAME }}'

          # 1) 러너의 공인 IP 획득
          MYIP="$(curl -fsSL ifconfig.me || curl -fsSL https://checkip.amazonaws.com || curl -fsSL https://api.ipify.org)"
          MYIP="$(echo -n "$MYIP" | tr -d '\r\n')"
          [[ "$MYIP" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] || { echo "Failed to detect runner IP"; exit 1; }
          MYCIDR="${MYIP}/32"
          echo "Runner IP: $MYCIDR"

          # 2) 현재 퍼블릭 허용 CIDR 조회
          CUR_JSON=$(aws eks describe-cluster --region "$REGION" --name "$CLUSTER" \
                      --query 'cluster.resourcesVpcConfig.publicAccessCidrs' --output json)

          # 3) 없으면 추가
          NEW_JSON=$(jq --arg ip "$MYCIDR" 'if index($ip) then . else . + [$ip] end' <<<"$CUR_JSON")

          # 원복용 백업 저장
          echo "orig=$(printf %s "$CUR_JSON" | base64 -w0)" >> "$GITHUB_OUTPUT"

          if [ "$NEW_JSON" != "$CUR_JSON" ]; then
            aws eks update-cluster-config --region "$REGION" --name "$CLUSTER" \
              --resources-vpc-config publicAccessCidrs="$(jq -r 'join(",")' <<<"$NEW_JSON")"
            aws eks wait cluster-active --region "$REGION" --name "$CLUSTER"
          else
            echo "Runner IP already allowed."
          fi

      # HardenEKS 실행
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create venv & install HardenEKS
        run: |
          python3 -m venv /tmp/.venv
          source /tmp/.venv/bin/activate
          pip install hardeneks
          echo "/tmp/.venv/bin" >> "$GITHUB_PATH"

      - name: Run HardenEKS
        run: |
          mkdir -p "$REPORT_DIR/hardeneks"
          hardeneks \
            --region "${{ secrets.AWS_REGION }}" \
            --cluster "${{ secrets.EKS_CLUSTER_NAME }}" \
            --config config/config.yaml \
            --export-html "$REPORT_DIR/hardeneks/report.html" \
            --export-json "$REPORT_DIR/hardeneks/report.json" \
            --export-csv  "$REPORT_DIR/hardeneks/report.csv"

      # Kubent 설치 및 실행 (항상 최신)
      - name: Install kubent (latest)
        run: |
          sh -c "$(curl -sSL https://git.io/install-kubent)"
          kubent -v

      - name: Run kubent scan
        run: |
          mkdir -p "$REPORT_DIR/kubent"
          kubent -o json -O "$REPORT_DIR/kubent/kubent.json" || true
          kubent -o csv  -O "$REPORT_DIR/kubent/kubent.csv"  || true

          if jq -e 'length > 0' "$REPORT_DIR/kubent/kubent.json" >/dev/null 2>&1; then
            echo "kubent: deprecated API usage found."
            exit 2
          else
            echo "kubent: no deprecated API usage detected."
          fi

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ secrets.EKS_CLUSTER_NAME }}
          path: ${{ env.REPORT_DIR }}/
          retention-days: 14
          if-no-files-found: error

      - name: Revert EKS API allowlist
        if: always()
        run: |
          REGION='${{ secrets.AWS_REGION }}'
          CLUSTER='${{ secrets.EKS_CLUSTER_NAME }}'
          ORIG_B64='${{ steps.allowapi.outputs.orig }}'
          if [ -n "$ORIG_B64" ]; then
            ORIG_JSON="$(echo "$ORIG_B64" | base64 -d)"
            aws eks update-cluster-config --region "$REGION" --name "$CLUSTER" \
              --resources-vpc-config publicAccessCidrs="$(jq -r 'join(",")' <<<"$ORIG_JSON")"
            aws eks wait cluster-active --region "$REGION" --name "$CLUSTER"
          fi